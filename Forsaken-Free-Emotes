-- Services
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Player & Character
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildOfClass("Humanoid")

-- Emotes Folder
local assetsFolder = ReplicatedStorage:FindFirstChild("Assets")
local emotesFolder = assetsFolder and assetsFolder:FindFirstChild("Emotes")

local emotes = {}

if emotesFolder then
    for _, module in pairs(emotesFolder:GetChildren()) do
        if module:IsA("ModuleScript") then
            local success, emoteData = pcall(require, module)
            if success then
                if typeof(emoteData) == "table" then
                    local assetID = emoteData.AssetID
                    if assetID and typeof(assetID) == "string" then
                        emotes[module.Name] = emoteData
                        print("✅ Loaded emote:", module.Name, "| AssetID:", assetID, "| SFX:", emoteData.SFX or "None")
                    else
                        warn("⚠️ Invalid AssetID in:", module.Name, "| Found:", tostring(emoteData.AssetID))
                    end
                else
                    warn("❌ Emote module returned non-table data:", module.Name, "| Type:", typeof(emoteData))
                end
            else
                warn("❌ Failed to require module:", module.Name, "| Error:", emoteData)
            end
        end
    end
else
    warn("Emotes folder not found!")
end

-- UI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = player:FindFirstChildOfClass("PlayerGui")
if not ScreenGui.Parent then
    warn("PlayerGui not found! UI won't show.")
end

-- Create EmoteFrame (ScrollingFrame)
local EmoteFrame = Instance.new("ScrollingFrame")
EmoteFrame.Size = UDim2.new(0.3, 0, 0.4, 0)
EmoteFrame.Position = UDim2.new(0.35, 0, 0.3, 0)
EmoteFrame.BackgroundTransparency = 1
EmoteFrame.ScrollingDirection = Enum.ScrollingDirection.Y
EmoteFrame.ScrollBarThickness = 10
EmoteFrame.ZIndex = 10
EmoteFrame.Visible = false -- Initially hidden
EmoteFrame.Parent = ScreenGui

-- Add a gradient background for a cooler look
local UIGradient = Instance.new("UIGradient")
UIGradient.Parent = EmoteFrame
UIGradient.Color = ColorSequence.new(
    Color3.fromRGB(30, 30, 30),
    Color3.fromRGB(50, 50, 50)
)
UIGradient.Rotation = 45
local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Parent = EmoteFrame
UIListLayout.FillDirection = Enum.FillDirection.Vertical
UIListLayout.Padding = UDim.new(0, 5)

-- Variables for tracking currently playing effects
local currentAnimation = nil
local currentSound = nil
-- We'll store any special effect clones along with their heartbeat connection
local currentClones = {}

-- Create Buttons for Each Emote
for emoteName, data in pairs(emotes) do
    print("Creating button for:", emoteName)
    
    -- Create a container frame for each button (for image + button)
    local buttonFrame = Instance.new("Frame")
    buttonFrame.Size = UDim2.new(1, 0, 0, 50)
    buttonFrame.BackgroundTransparency = 1
    buttonFrame.Parent = EmoteFrame

    -- Create an ImageLabel for the RenderImage (if provided)
    local imageLabel = Instance.new("ImageLabel")
    imageLabel.Size = UDim2.new(0, 50, 0, 50)
    imageLabel.Position = UDim2.new(0, 10, 0, 0)
    imageLabel.BackgroundTransparency = 1
    imageLabel.Image = data.RenderImage or ""
    imageLabel.Parent = buttonFrame

    -- Create the button; use DisplayName if provided, else use the module name
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -60, 0, 50)
    button.Position = UDim2.new(0, 60, 0, 0)
    button.Text = data.DisplayName or emoteName
    button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 18
    button.TextStrokeTransparency = 0.7
    button.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    button.Parent = buttonFrame

    -- Rounded corners for the button
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = button

    -- Hover Animation: scale up slightly on mouse enter
    button.MouseEnter:Connect(function()
        button:TweenSize(UDim2.new(1, -60, 0, 55), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.2, true)
        button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        imageLabel:TweenSize(UDim2.new(0, 55, 0, 55), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.2, true)
    end)
    button.MouseLeave:Connect(function()
        button:TweenSize(UDim2.new(1, -60, 0, 50), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.2, true)
        button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        imageLabel:TweenSize(UDim2.new(0, 50, 0, 50), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.2, true)
    end)

    -- When the button is clicked…
    button.MouseButton1Click:Connect(function()
        if not humanoid then
            warn("Humanoid not found!")
            return
        end

        -- Stop any currently playing animation or sound
        if currentAnimation then
            currentAnimation:Stop()
            currentAnimation = nil
        end
        if currentSound then
            currentSound:Stop()
            currentSound = nil
        end
        -- Remove any existing clones (special effects)
        for _, entry in pairs(currentClones) do
            if entry.connection then entry.connection:Disconnect() end
            if entry.clone then entry.clone:Destroy() end
        end
        currentClones = {}

        -- Play the emote's animation
        local animator = humanoid:FindFirstChildOfClass("Animator") or humanoid:WaitForChild("Animator")
        if animator then
            local animation = Instance.new("Animation")
            animation.AnimationId = data.AssetID
            currentAnimation = animator:LoadAnimation(animation)
            currentAnimation:Play()
            print("Playing animation:", emoteName, "AssetID:", data.AssetID)
        else
            warn("Animator missing!")
        end
        if data.SFX then
            currentSound = Instance.new("Sound")
            currentSound.SoundId = data.SFX
            currentSound.Parent = character
            currentSound.Looped = data.SFXProperties and data.SFXProperties.Looped or false
            currentSound.Volume = 2
            currentSound:Play()
            print("Playing sound for:", emoteName, "SFX:", data.SFX, "Looped:", currentSound.Looped)
            currentSound.Ended:Connect(function()
                currentSound:Destroy()
            end)
        end
        if emoteName == "Locked" and data.LockedEffect then
            local lockedClone = data.LockedEffect:Clone()
            lockedClone.Parent = character:FindFirstChild("HumanoidRootPart")
            -- Make all BaseParts non-colliding and anchored
            for _, part in ipairs(lockedClone:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                    part.Anchored = true
                end
            end
            local connection = RunService.Heartbeat:Connect(function()
                if character and character:FindFirstChild("HumanoidRootPart") then
                    if lockedClone.PrimaryPart then
                        lockedClone:SetPrimaryPartCFrame(character.HumanoidRootPart.CFrame)
                    else
                        for _, part in ipairs(lockedClone:GetDescendants()) do
                            if part:IsA("BasePart") then
                                part.CFrame = character.HumanoidRootPart.CFrame
                            end
                        end
                    end
                else
                    connection:Disconnect()
                end
            end)
            table.insert(currentClones, {clone = lockedClone, connection = connection})
        end
        if emoteName == "MissTheQuiet" and data.EmoteLighting then
            local lightingPart = data.EmoteLighting:FindFirstChild("lighting")
            if lightingPart then
                local cloneLighting = lightingPart:Clone()
                cloneLighting.Parent = character:FindFirstChild("HumanoidRootPart")
                cloneLighting.CanCollide = false
                cloneLighting.Transparency = 1
                cloneLighting.Anchored = true
                cloneLighting.Position = character.HumanoidRootPart.Position
                local connection = RunService.Heartbeat:Connect(function()
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        cloneLighting.CFrame = character.HumanoidRootPart.CFrame
                    else
                        connection:Disconnect()
                    end
                end)
                table.insert(currentClones, {clone = cloneLighting, connection = connection})
            end
        end
        if emoteName == "HakariDance" and data.HakariBeamEffect then
            local cloneBeam = data.HakariBeamEffect:Clone()
            cloneBeam.Parent = character:FindFirstChild("HumanoidRootPart")
            cloneBeam.CanCollide = false
            cloneBeam.Transparency = 0
            cloneBeam.Anchored = true
            cloneBeam.Position = character.HumanoidRootPart.Position
            local connection = RunService.Heartbeat:Connect(function()
                if character and character:FindFirstChild("HumanoidRootPart") then
                    cloneBeam.CFrame = character.HumanoidRootPart.CFrame
                else
                    connection:Disconnect()
                end
            end)
            table.insert(currentClones, {clone = cloneBeam, connection = connection})
        end
        EmoteFrame.Visible = false
    end)
end

EmoteFrame:GetPropertyChangedSignal("AbsoluteCanvasSize"):Connect(function()
    EmoteFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y)
end)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.B then
        print("B pressed! Toggling UI.")
        
        if EmoteFrame.Visible then
            -- Stop current animation and sound
            if currentAnimation then
                currentAnimation:Stop()
                currentAnimation = nil
            end
            if currentSound then
                currentSound:Stop()
                currentSound = nil
            end
            -- Remove any special effect clones and disconnect their heartbeat
            for _, entry in pairs(currentClones) do
                if entry.connection then entry.connection:Disconnect() end
                if entry.clone then entry.clone:Destroy() end
            end
            currentClones = {}
            EmoteFrame.Visible = false
        else
            EmoteFrame.Visible = true
        end
    end
end)
if EmoteFrame.Visible then
    print("EmoteFrame is visible!")
else
    warn("EmoteFrame is still not visible!")
end
